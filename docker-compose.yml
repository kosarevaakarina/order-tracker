version: '3.8'
services:
  app:
    build: .
    container_name: app
    depends_on:
      - db
      - kafka
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app/src
    ports:
      - '8000:8000'
    volumes:
      - .:/app
    command: /bin/bash -c "sleep 10 && ALEMBIC_CONFIG=src/alembic.ini alembic upgrade head && uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload"
    networks:
      - app-network

  db:
    restart: always
    image: postgres:14-alpine
    user: ${POSTGRES_USER}
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    container_name: 'zookeeper'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - app-network

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    container_name: 'kafka'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_INTERNAL://kafka:9092'
      KAFKA_LISTENERS: 'PLAINTEXT_INTERNAL://0.0.0.0:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT_INTERNAL:PLAINTEXT'
      KAFKA_LISTENER_NAME_INTERNAL: 'PLAINTEXT_INTERNAL'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT_INTERNAL'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafdrop:
    image: 'obsidiandynamics/kafdrop:3.27.0'
    container_name: 'kafdrop'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:9092'
      JVM_OPTS: '-Xms32M -Xmx64M'
    ports:
      - '9000:9000'
    depends_on:
      - kafka
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pg_data:
